#!/usr/bin/env node

var _ = require('lodash');
var readline = require('readline');
var events = require('events');

var DataReader = require('../lib/data-reader');
var RedisWatcher = require('../services/redis-watcher');
var HashWatcher = require('../services/hash-watcher');

var builder = require('../lib/peripheral-builder');
var schema = require('../lib/redis-schema');
var hashkeys = require('../lib/peripheral-hashkeys');
var helpers = require('../lib/hash-helpers');

var peripheralKey = null;
var configWatcher = null;
var reader = null;
var cli = null;
var emitter = new events.EventEmitter();

new RedisWatcher()
    .on('retry',function(){ emitter.emit('stop','Redis is not ready')})
    .on('ready',function(client){ if (client) emitter.emit('redis',client); });

emitter
    .once('start',function(){ RedisWatcher.instance.start(); })
    .once('stop',function(message){
        if (cli) cli.close();
        if (reader && reader.started()) reader.stop();
        if (configWatcher && configWatcher.started()) configWatcher.stop();
        RedisWatcher.instance.stop();
        console.log(message);
    })
    .once('redis',function(client){
        client.keys(schema.peripheral.settings.keysPattern()).then(function(settingsKeys){
            var peripheralKeys = _.map(settingsKeys,function(key){ return schema.peripheral.settings.getParam(key); });
            if (peripheralKeys.length <= 0) return emitter.emit('stop','Sorry, no peripherals are defined.');

            peripheralKey = process.argv.length > 2 ? process.argv[2] : peripheralKeys.length == 1 ? peripheralKeys[0] : null;
            if (_.indexOf(peripheralKeys,peripheralKey) < 0) return emitter.emit('stop','You must select one of the following: ' + peripheralKeys.join(', '));

            var settingsKey = schema.peripheral.settings.useParam(peripheralKey);
            configWatcher = new HashWatcher(settingsKey,hashkeys)
                .on('change',function(hash){
                    if (!hash) return;

                    var connection = configWatcher.validateRequirements('connection',hashkeys.connection,helpers.requirements(hashkeys.connection));
                    var commands = configWatcher.validateRequirements('commands',hashkeys.commands,helpers.requirements(hashkeys.commands));
                    if (connection && commands)
                        emitter.emit('reader',connection,commands);
                    else
                        emitter.emit('stop','Peripheral not ready: ' + peripheralKey);
                })
                .start(client);
        });
    })
    .once('reader',function(connection,commands){
        var peripheral = builder.newPeripheral(connection);
        if (!peripheral)
            emitter.emit('stop','Peripheral not configured: ' + peripheralKey);
        else {
            reader = new DataReader(peripheral,commands)
                .on('ready',function(){
                    emitter.emit('cli');
                })
                .on('retry',function(reason){
                    reader.stop();
                    emitter.emit('stop','Peripheral not ready: ' + peripheralKey + ' - ' + reason);
                })
                .on('error',function(error){
                    reader.stop();
                    emitter.emit('stop','Peripheral error: ' + peripheralKey + ' - ' + error);
                })
                .start();
        }
    })
    .on('cli',function(){
        cli = readline.createInterface({input: process.stdin,output: process.stdout,terminal: false});
        cli.setPrompt('> ');
        cli.on('line',function(line){
            emitter.emit('line',line);
        });
        emitter.emit('prompt');
    })
    .on('prompt',function(){
        cli.prompt();
    })
    .on('line',function(line){
        if (line.length <= 0)
            emitter.emit('stop','Done.');
        else {
            reader.submit(line, function (error, command, response) {
                console.log('error:    ' + error);    // TODO figure out why 'error' is required to trigger console output when using "readline"
                console.log('command:  ' + command);
                console.log('response: ' + response);
                emitter.emit('prompt');
            });
        }
    })
    .emit('start');