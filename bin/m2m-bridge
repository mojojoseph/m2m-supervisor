#!/usr/bin/env node

var M2mProxy = require('../lib/m2m-proxy');
var RedisWatcher = require('../services/redis-watcher');
var HashWatcher = require('../services/hash-watcher');
var RouteWatcher = require('../services/route-watcher');
var ModemWatcher = require('../services/modem-watcher');
var HeartbeatGenerator = require('../services/heartbeat-generator');

var schema = require('../lib/redis-schema');
var hashkeys = require('../lib/config-hashkeys');

var routeWatcher = null;
var configWatcher = new HashWatcher(schema.config.key,hashkeys)
    .addKeysetWatcher('gateway',false,false,function(gateway){

    });
new RedisWatcher()
    .addClientWatcher(configWatcher)
    .start();

var redisWatcher = new RedisWatcher().start(function(event,redis) {
    console.log('redis:' + event);
    if (event !== 'ready') return;

    var configChk = new HashWatcher(redis,schema.config.key,hashkeys.gateway).start(function(event,gateway) {
        console.log('config:' + event);
        if (event !== 'ready') return;

        var heartbeat = null;


        var modem = null;
        var route = new RouteWatcher(gateway)  // TODO detect failure and stop the dependent objects... then restart on ready
            .on('ready',function(){ if (!modem) {
                modem = new ModemWatcher(gateway)
                    .on('imei',function(imei){
                        if (!gateway.imei)  proxy.gateway.imei = gateway.imei = imei;
                        redis.hsetnx(schema.config.key,hashkeys.gateway.imei.key,imei);
                        if (!heartbeat) heartbeat = new HeartbeatGenerator(redis,proxy).start();
                    })
                    .start();
            }})
            .start();
    });
});
