#!/usr/bin/env node

var _ = require('lodash');

var VERBOSE = process.argv.length > 2 && _.startsWith(process.argv[2],'v');
var DEVICE_TYPE = 'serial';
var PORT_FILE = '/dev/ttyUSB2';
var COMMAND_SUFFIX = DEVICE_TYPE === 'serial' ? '\r' : '\n';

var builder = require('../lib/device-builder');

var callback = null;
var device = new builder.newDevice({type: DEVICE_TYPE,inFile: PORT_FILE,outFile: PORT_FILE,serialPort: PORT_FILE,serialBaudRate: 460800});
device
    .on('data',function(data){
        _.each(data.toString().split('\n'),function(line){
            line = _.trim(line);
            if (line.length > 0 && callback) callback(line);
        });
    })
    .on('error',function(error){
        console.log('error: ' + error);
        process.exit(1);
    })
    .on('retry',function(error){
        console.log('retry error: ' + error);
        process.exit(1);
    })
    .on('ready',function(){
        sendExpect('AT+CGMI','',function(){
            sendExpect('AT+CGMM','',function(){
                sendExpect('AT+CGMR','',function(){
                    sendExpect('AT+CSQ','',function(){
                        device.close();
                    })
                })
            })
        });
    })
    .open();

function sendExpect(command,prefix,done){
    var commandSeen = null;
    var prefixSeen = null;
    console.log('COMMAND: ' + command);
    callback = function(data){
        var check = '';
        if (!commandSeen && data === command) {
            commandSeen = command;
            check = ' - command';
        } else if (commandSeen && !prefixSeen && _.startsWith(data,prefix)) {
            prefixSeen = data;
            check = ' - match';
        }
        if (VERBOSE) console.log('data: ' + data + check);
        if (data === 'OK' && commandSeen && prefixSeen) {
            console.log('RESULT:' + commandSeen + ' => ' + prefixSeen);
            callback = null;
            done && done();
        }
    };
    device.writeBuffer(command + COMMAND_SUFFIX,function(error){
        if (error) console.log('callback error: ' + error);
    });
}
